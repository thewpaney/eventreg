* 2013  :ARCHIVE:
** Functionality [100%]
*** DONE Make all flashes go to pop-up JS box (or maybe just errors)
*** DONE Implement time start/time limit
*** DONE Make fancy interface for admins [100%]
**** DONE Export to Excel [100%]
***** DONE Export to CSV
***** DONE Download
**** DONE Manually Add Users
**** DONE Manually Add Events
*** DONE Modify database fields to suit RJHS in-place database
*** DONE No unregistering or switching - leave that to ProFe
*** DONE Phil Steele for intro
    
** Deployment [100%]
*** DONE Verify all site information
*** DONE Stress test (blitz.io)
*** DONE Deploy on stratosphe.re
   
Morgan is implementing a failover (Tommy's server), but in order to do that
we need to talk with the tech department.

<integ3r> I'm suggesting that the failover be winterhold.skyrim.stratosphe.re
<integ3r> The main should be whiterun.skyrim.stratosphe.re
<integ3r> Talk to the tech department
<integ3r> Get them to add a DNS entry (e.g. service.regisjesuit.com)
<integ3r> and add a CNAME entry to eventreg.stratosphe.re
<integ3r> which is another CNAME, pointing to one of the two servers
<integ3r> both running the Rails app and MySQL.
<integ3r> so, service.regisjesuit.com => eventreg.stratosphe.re => /(winterhold|whiterun)/
<integ3r> There's no redirect
** Hotfix [16%]
*** TODO Gender limits [0%]
**** Method in workshop that checks user signup stuff?
*** DONE Way to display inline descriptions
**** Separate page?
**** "Step two"
**** On the right side of the register screen?
*** TODO More descriptive registration results page
*** TODO Teacher registration limits
*** TODO No signing up for the same thing twice
*** TODO Admin dashboard [0%]
**** People who aren't signed up
***** Download a list of thems
**** 
* 2014 :ARCHIVE:
** Basic requirements
*** Two workshops in the morning
**** Pull from set 1
*** One workshop in the afternoon
**** Pull from set 2
*** Gender limits better
The biggest problem we had last year was that someone could have nowhere to go 
without either breaking the gender limit or being in the same workshop twice

I think the best way to fix this is to check if the person trying to sign up
has no options for a session. If that's the case, and allowing them to bipass 
the gender limits will fix that, let them break the gender limits.

Evenly distribute overflow of gender

*** Working the first time
*** E-mail registration confirmation
**** Ask to complete if unfinished
** Target deadlines:
*** December 17-18th ish Demo
*** February 24th-28th ish
*** Diversity Day: March 11th
** Student Info:
*** SIDLastFirstDivGrade/YearEmailprefix
** Meet 17th/18th of December
** Linode Server
*** Practice?
Testing for Volume
Testing whether any permutation of button presses can screw things up
*** Month-to-month, buy in advance
*** Buy for all of February, get set up immediately
** Sign up for one section at a time and send feedback via Javascript
*** Make Ajax work everywhere (Netscape, Explorer)
*** Awesome Admin Page
**** God Mode (™)
**** Email?
**** Empower the admins
* 2015 :ARCHIVE:
** Gender limits
*** On overflow in endgame, spread gender evenly (rank by percentage maybe)?
** Emails
*** diversity@regisjesuit.com!
** Deadlines!
*** Conference: March 10
*** Registration info: Feb 9 ideally
*** Registration opens: Feb 24 - March 2
** Overflow
*** Overflow class in each session that is unique (otherwise we pull kids)
** Spreadsheet Data Fields
*** Workshop
**** Presentor/Name/Description/S1/S2/S3/Room/Slimit/Tlimit/Gprc
*** Student
**** SID/First/Last/Div/Prefix/Gender/Year/2RW/Advisement
*** Teacher
**** TID/First/Last/Div/Prefix/2RW?/Advise?
** Linode
*** Yay!
** Sign up for one section at a time and send feedback via Javascript
*** Make Ajax work everywhere (Netscape, Explorer)
*** Awesome Admin Page
**** God Mode (™)
**** Email?
**** Empower the admin
** Flexible signup
*** Overflow number
* 2016 :ARCHIVE:
** Access
*** MySQL - root: letmein
*** Root - root: Theansweris42
*** Web - nginx: 
** diversityprogram@regisjesuit.com to get past spam filters
** Fancy thinking to fill up large workshops first
** Registration on February 16th - February 23rd
*** Workshop info by February 4th/5th
*** Finalized data by February 10th (loose)
** Another conference call the week of the 8th
** Conference March 1st
* 2018
** Priorities
*** TODO Seed the database
*** TODO Smoke Test: Can 5 random students and a teacher signup with proper emails?
*** TODO Fuzz Test: Iterating stochastic signups, how do we do?
**** Let's avoid the new helpers. I like them, but the other things have worked for years.
**** Look for: 
     - Large workshops in multiple sessions are hard to fill
     - Students sometimes had two signups in one session last year - race condition?
*** DONE Get Vela copy for confirmation emails
**** Turns out we don't do confirmation emails
** Admin things                                                     :ARCHIVE:
*** Most stuff hasn't changed
**** Still class limits and gender limits
**** Still a few multi-session ones
*** More test-driven development
**** Write some unit tests first?
**** Share workshop spreadsheet immediately
*** DATES
**** Diversity Day is March 6th
**** Registration: Feb 26-28, class staggered
***** No classes Feb 27th
** Technical things
*** [66%] To write
**** DONE Sign up specific user for specific workshop array
***** right now this is in the model
**** DONE Identify problems
***** teachers
***** workshops
***** students
**** TODO Check if registration is complete
***** Is this no problem teachers OR students OR workshops?
***** Make sure these problem methods are "complete"
****** If all three are empty, no further changes need to be made
****** Would be good to enumerate success conditions again
****** "quantitative characteristics of a completed registration database"
*** [50%] To revisit
**** TODO Downloading workshops from Google Drive
***** Make sure dependencies don't break in the future
**** DONE student#force and teacher#force
***** Move these out of model?
**** DONE student#auto and teacher#auto
**** TODO student#finished_with_registration? and teacher#finished_with_registration?
***** Essentially just `return sessions_needed.empty?`
***** Can we delete this? I think we can
*** [50%] Views
**** DONE Get rid of highlighting the workshop from the list once it's been claimed
***** Eliminates 3 database queries
**** TODO Delete users#table
*** [50%] Helpers
**** TODO events_helper
***** Where are the generate_html functions ever used?
**** DONE user_helper
***** sign_up_user method
*** General
**** Can move a lot of code out of the models
**** Why are student and teacher different classes?
**** vindicator.rb really just calls student#auto
**** Delete workshop#student_percentage_taken
**** Delete workshop#teacher_percentage_taken
**** workshop#cantSignUp does a lot of work - looks fine as is though
